plugins {
    id 'idea'
    id 'java-library'
    id 'net.neoforged.moddev' version '2.0.30-beta'
}

group = 'tld.unknown'
version = project.mod_version

java {
    archivesBaseName = project.mod_id
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

neoForge {
    version = project.forge_version

    //accessTransformers.from "src/main/resources/META-INF/accesstransformer.cfg"
    //validateAccessTransformers = true

    runs {
        configureEach {
            systemProperty 'terminal.ansi', 'true'
            systemProperty 'forge.logging.console.level', 'debug'
        }
        Client {
            client()
        }
        Server {
            server()
        }
        Data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/datagen/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        thaumcraft {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/datagen/resources' }

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version         : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                //"Specification-Vendor": "mystery authors",
                "Specification-Version"   : project.mod_version, // We are version 1 of ourselves
                "Implementation-Title"    : project.mod_id,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "mystery authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
